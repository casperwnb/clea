* 栈
** 定义
后进先出, 先进后出是栈的特点.

栈是一种"操作受限"的线性表, 只允许在一端插入和删除数据.

用数组实现的栈叫做: 顺序栈
用链表实现的栈叫做: 链式栈

** 算术计算
算术公式的后缀表示法, 也叫做逆波兰记法.
将一个计算公式转换为逆波兰表达式之后, 计算过程如下: 依次读入等式, 数据入栈, 如果读取到的是运算符
则从数据栈中弹出该操作符需要的操作数, 计算后将该值入栈即可.

使用后缀表达式的一个优点是: 不需要知道任何优先级规则.

平常书写的计算公式都是中缀表达式, 利用栈可以将一个标准形式的表达式转换为后缀表达式.

利用栈将中缀表达式转换为后缀表达式:
当读到的是一个数字时, 直接输出, 读到的是运算符则入栈, 入栈规则如下:
1. 如果遇到一个右括号, 就将栈元素弹出, 直到遇到第一个匹配的"(", 左括号只弹出不输出.
2. 如果遇到其他符号, 从栈中弹出栈元素知道发现优先级更低的元素为止, 弹出元素的工作完成后,
   在将当前的操作符入栈.
3. 除非是在处理")", 否则决不应该从栈中移走"("
4. 读到输入的末尾, 将栈元素全部弹出

例子: a + b * c + (d * e + f) * g => a b c * + d e * f + g * + 过程如下:
1. 读入a, 是数字, 输出a
2. 读入+, 放入栈中
3. 读入b, 输出b
4. 读入*, 栈顶元素的优先级比*低, 因此直接入栈
5. 读入c, 输出c
6. 读入 +, + 的优先级比* 低, 因此需要弹出*, 栈中剩下的 + 的优先级不比读入的" +"优先级低,
   因此也要弹出, 此时再将读入的" +"入栈.
7. 读入(, 放入栈中.
8. 读入d, 输出d
9. 读入*, 此时并没有处理闭括号, 因此入栈
10. 读入e, 输出e
11. 读入+, 栈顶的* 比 + 优先级高, 弹出" * ", 入栈+
12. 读入f, 输出f
13. 读入), 弹出栈顶元素, 直到遇到第一个匹配的(
14. 读入*, 入栈
15. 读入g, 输出g
16. 读取输入完成, 弹出栈中所有的数据

a - b - c => a b - c -
[[file:~/notes/clea/code/reverse_polish_notation.c][逆波兰表达式代码]]

** 应用
1. 函数调用栈
2. 栈在表达式求值中的应用
3. 栈在括号匹配中的应用
4. 算术计算

155,232,224,682,496
