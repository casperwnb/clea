* 二分查找
二分查找针对的是一个有序的数据集合, 查找思想有点儿类似分治思想. 每次都通过跟区间的中间元素对比,
将待查找的区间缩小为之前的一半, 直到找到要查找的元素或者区间被缩小为0.

[[file:~/notes/clea/code/bsearch.c][最基本的二分查找代码]]

** 二分查找注意事项
1. 非递归版本的循环退出条件: low <= high 而不是 low < high
2. mid的取值, mid = low + (high-low)/2, 比较好, 原因是(low+high)/2有可能会有加法溢出
3. 二分查找依赖的是顺序表结构-数组
4. 二分查找针对的是一个有序的数据集合
5. 二分查找只能用在插入、删除操作不频繁, 一次排序多次查找的场景.
6. 数据量太小时不适合二分查找, 如果数据之间的比较操作比较费时, 则不管数据量大小都推荐使用二分查找
7. 数据量太大也不适合二分查找, 因为需要连续的内存空间

** 应用
1. 编程实现"求一个数的平方根", 精确到小数点后6位
   [[file:~/notes/clea/code/calsqrt.c][计算平方数的代码]]
2. 给定一个循环有序数组, 如4 5 6 1 2 3针对这种情况, 如何实现一个二分查找算法. leetcode-33
   [[file:~/notes/clea/code/bsearchlooparray.c][循环数组二分查找代码]], 该代码可能会有问题.
3. 二分查找有序数组中某个数的所在范围 Search for a Range -- leetcode
   
* 二分查找的变形问题
十个二分九个错. 尽管第一个二分查找算法于1946年出现, 然而第一个完全正确的二分查找算法实现直到
1962年才出现.

有4种常见的二分查找变形问题

** 查找第一个值等于给定值的元素
[[file:~/notes/clea/code/bsearchfirst.c][元素第一次出现的二分查找代码]]

** 查找最后一个值等于给定值的元素
[[file:~/notes/clea/code/bsearchlast.c][元素最后一次出现的二分查找代码]]

** 查找第一个大于等于给定值的元素
[[file:~/notes/clea/code/bsearchfirstge.c][查找第一个大于等于给定值的元素]]

** 查找最后一个小于等于给定值的元素
[[file:~/notes/clea/code/bsearchlastle.c][查找最后一个小于等于给定的代码]]


