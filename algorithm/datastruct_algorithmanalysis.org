* 数学知识复习
1. 换底公式
   logA B = (logC B) / (logC A)
   logA B 表示 x^A = B
2. 指数
   2^N + 2^N = 2 ^ (N+1)
3. 级数
   i=0->n, 求2^i的和, 即: 2^0+2^1+2^2+...+2^n = 2^(n+1) - 1
   i=0->n, 求A^i的和, 即: A^0+A^1+A^2+...+A^n = (A^(n+1) - 1)/(A-1), 注意当0<A<1时, n趋于无穷时,
   该值趋于1/(1-A).

   算术级数: i=1->n, 求i的和, 即1+2+3+...+n = (n+1)n/2
   i=1->n, 求i^2的和, 即: 1^2+2^2+3^2+...+n^2 = n(n+1)(2n+1)/6 约等于 n^3/3
   i=1->n, 求i^k的和, 即: 1^k+2^k+3^k+...+n^k 约等于 (n^(k+1))/|k+1| k不等于-1
   Hn叫做调和数, 其和叫做调和和. 当k=-1时, Hn 约等于 logeN 其误差趋于0.57721566, 这个值叫做
   欧拉常数.
4. 模运算
   如果N整除A-B, 则A与B模N同余.

* 算法
算法是为求解一个问题需要遵循的, 被清楚地指定的简单指令的集合.
对于一个问题, 一旦给定某种算法并且确定是正确的, 之后最重要的一步就是确定该算法的时间和空间复杂度.

** 联机算法(online algorithm)
举一个例子: 计算最大子序列的和的算法
#+BEGIN_SRC c
int maxsubarraysum(int *data, int size) {
    int maxresult=data[0], tmpsum = 0;
    for(int i=0; i<size; ++i) {
        tmpsum += data[i];
        // 当tmpsum大于零时才进行大小的判断
        if(tmpsum > 0 && maxresult < tmpsum) {
            maxresult = tmpsum;
        } else {
            tmpsum = 0;
            maxresult = maxresult > data[i] ? maxresult : data[i];
        }
    }
    return maxresult;
}
#+END_SRC
该算法只对数据进行一次扫描, 一旦data[i]被读入并处理, 就不需要被记忆, 因此如果数组在磁盘或磁带上,
数据可以被顺序读入, 在主存中不必存储数组的任何部分. 该算法在任意时刻, 都能对它已经读入的数据
给出子序列问题的正确答案, 具有这种特性的算法就叫做联机算法.

仅需要常量空间并以线性时间运行的在线算法几乎是完美的算法.
