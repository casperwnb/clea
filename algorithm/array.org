* 数组定义
一种线性表数据结构, 用一组连续的内存空间, 来存储一组具有相同类型的数据.

注意:
线性表: 数据像排成一条线一样的结构. 每个线性表上的数据最多只有前后两个方向, 链表、队列、栈等也
是属于线性表结构.

非线性表: 二叉树、堆、图. 数据之间并不是简单的前后关系.

数组是 连续的内存空间和相同的数据类型, 因此可以"随机访问".

** 警惕数组越界
#+BEGIN_SRC c
#include <stdio.h>

int main(int argc, char* argv[]){
    int i = 0;
    int arr[3] = {0};
    for(; i<=3; i++){
        arr[i] = 0;
        printf("hello world\n");
    }
    return 0;
}
#+END_SRC
这段代码在linux上运行会无限循环. 原因是: a[3]访问超出了数组界限, 而此时a[3]对应的地址恰好是变量
i的地址, 因此就将i的值改为了0, 因此导致代码无限循环.

** 使用技巧
如果能事先确定数组的大小, 在创建数组的时候就使用该大小, 这样可以减少数组扩容时带来的性能损耗.

** 练习题目
1. 将字符串中的每个空格替换为'%20'
   要求: 在原有字符串的空间上进行替换, 原有字符串有足够的空间
   [[file:~/notes/clea/code/array_replace.c][字符串替换]]
2. 在二维数组中查找
   [[file:~/notes/clea/code/twodimension_array_find.c][二维数组查找]]
3. 求最大子序列和
   给定一个序列, 该序列使用数组进行存放, 找出该序列中连续最大子序列的和.
   [[file:~/notes/clea/code/maxsubarray.c][最大子序列和]]

** 数组的运用
1. JVM标记清除垃圾回收算法
   假设数组a[10]中有8个元素a, b, c, d, e, f, g, h 现在依次删除a, b, c三个元素.
   为了避免d, e, f, g, h这几个数据被移动三次, 可以先记录下已经删除的数据, 每次删除操作并不是真正
   的搬移数据, 只是记录数据已经被删除, 当数组中没有更多空间存储数据时, 再真正触发执行一次删除操作
